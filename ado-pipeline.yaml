variables:
  ${{ if eq( variables['Build.BuildId'], 0 ) }}:
    command: 'apply'
    arguments: '-f path/to/manifests'
  ${{ else }}:
    command: 'set'  # 'rollout' is not yet available as a kubectl command option 
    arguments: 'image [TYPES] containerName=containerImg:$(Build.BuildId) --all'

trigger:
- main

pool: 
  vmImage: ubuntu-latest

stages:
  - stage: Configuration
    jobs:
    - job: Configuration
      displayName: Installing Docker and kubectl on agent
      steps:
      - task: DockerInstaller@0
        displayName: Installing Docker
        inputs:
          dockerVersion: '17.09.0-ce'
      - task: KubectlInstaller@0
        displayName: Installing kubectl 
        inputs:
          kubectlVersion: 'latest'
          
  - stage: Build
    displayName: 'Building and pushing images'
    jobs:
      - job: Build
        steps:
        # OPTION 1: using docker-compose, if a docker-compose.yml exists
        #- task: DockerCompose@0
        #  displayName: 'Building images'
        #  inputs:
        #    containerregistrytype: 'Container Registry'
        #    dockerRegistryEndpoint: 'jfrog-artifactory'
        #    dockerComposeFile: '**/docker-compose.yml'
        #    action: 'Build services'
        #    # fully qualified name set by default

        #- task: DockerCompose@0
        #  displayName: 'Pushing images'
        #  inputs:
        #    containerregistrytype: 'Container Registry'
        #    dockerRegistryEndpoint: 'jfrog-artifactory'
        #    dockerComposeFile: '**/docker-compose.yml'
        #    action: 'Push services'

        # OPTION 2: multiple Docker tasks, a buildAndPush for each image to build and push
        
        - task: Docker@2
          displayName: 'Building and pushing to JFrog'
          inputs:
            containerRegistry: 'tf-ado-artifactory-repo-connection'
            repository: 'tf-ado-repository'
            command: 'buildAndPush'
            Dockerfile: '**/Dockerfile'
            # tag: $(Build.BuildId) by default - BuildId increased each time

  - stage: Deploy
    dependsOn: Build
    displayName: 'Updating cluster resources'
    jobs:
    - job: Deploy
      steps:
      # Deploys containers
      - task: Kubernetes@1
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'tf-ado-aks-connection'
          command: '$(command)'
          arguments: '$(arguments)'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Container Registry'
          dockerRegistryEndpoint: 'tf-ado-artifactory-repo-connection'
