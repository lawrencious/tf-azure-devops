variables:
  ${{ if eq( variables['Build.BuildId'], 0 ) }}:
    command: 'apply'
    arguments: '-f path/to/manifests'
  ${{ else }}:
    command: 'set'  # 'rollout' is not yet available as a kubectl command option 
    arguments: 'image [TYPES] hello=hello:$(Build.BuildId) --all'
  imgBaseName: '20.105.145.98:8082/artifactory/tf-ado-docker-local'

trigger:
- main

pool: 
  vmImage: ubuntu-latest

stages:
  - stage: Configuration
    jobs:
    - job: Configuration
      displayName: Installing Docker, kubectl, JFrog CLI
      steps:
      - task: DockerInstaller@0
        displayName: Installing Docker
        inputs:
          dockerVersion: '17.09.0-ce'
      - task: KubectlInstaller@0
        displayName: Installing kubectl 
        inputs:
          kubectlVersion: 'latest'
      #- task: ArtifactoryToolsInstaller@1
      #  inputs:
      #    artifactoryService: 'tf-ado-artifactory-connection'
      #    cliInstallationRepo: 'cli'
      - script: |
          sudo touch /etc/docker/daemon.json
          sudo chmod a+w /etc/docker/daemon.json
          printf "{\n\t'insecure-registries' : ['http://20.105.145.98:8082']\n}\n" > /etc/docker/daemon.json
        
  - stage: Build
    displayName: 'Building and pushing images'
    jobs:
      - job: Build
        steps:
        - task: Docker@2
          inputs:
            containerRegistry: 'tf-ado-artifactory-repo-connection'
            repository: 'artifactory/tf-ado-docker-local/hello'
            command: 'build'
            Dockerfile: '**/Dockerfile'
        
        - script: |
            sudo docker login 20.105.145.98:8082 -u lorenzo -p Password123!
            sudo docker image ls
            sudo docker push $(IMGBASENAME)/hello:$(Build.BuildId)
        #- task: ArtifactoryDocker@1
        #  inputs:
        #    command: 'push'
        #    artifactoryService: 'tf-ado-artifactory-connection'
        #    targetRepo: 'tf-ado-docker-remote'
        #    imageName: '$(imgBaseName)/hello:$(Build.BuildId)'

  - stage: Deploy
    dependsOn: Build
    displayName: 'Updating cluster resources'
    jobs:
    - job: Deploy
      steps:
      # Deploys containers
      - task: Kubernetes@1
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'tf-ado-aks-connection'
          command: '$(command)'
          arguments: '$(arguments)'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Container Registry'
          dockerRegistryEndpoint: 'tf-ado-artifactory-repo-connection'
